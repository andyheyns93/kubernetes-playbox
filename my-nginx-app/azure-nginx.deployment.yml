# k create secret generic azure-secret --from-literal=azurestorageaccountname=[STORAGE_ACC] --from-literal=azurestorageaccountkey=[STORAGE_ACC_KEY]
# k exec -it [PODNAME] -c [CONTAINERNAME] -- /bin/bash

apiVersion: v1
kind: Secret
metadata:
  name: azure-secret
type: Opaque
data:
  azurestorageaccountname: [STORAGE_ACC]
  azurestorageaccountkey: [STORAGE_ACC_KEY]

#k get clusterrolebinding
#k delete clusterrolebinding docker-for-desktop-binding
#https://github.com/docker/for-mac/issues/3694
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reader

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pvc-ro
rules:
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pvc-ro
  namespace: default
subjects:
  - kind: ServiceAccount
    name: "reader"
    namespace: default
roleRef:
  kind: Role
  name: pvc-ro
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: azure-storage-pv
  labels:
    type: azure-storage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile
  capacity:
    storage: 10Gi
  persistentVolumeReclaimPolicy: Retain
  azureFile:
    secretName: azure-secret
    shareName: aksshare
    readOnly: false
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=1000
    - gid=1000
    - mfsymlinks
    - nobrl

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-storage-pvc
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx-app
  labels:
    app: my-nginx-app
spec:
  revisionHistoryLimit: 1
  replicas: 1
  selector:
    matchLabels:
      app: my-nginx-app
  template:
    metadata:
      labels:
        app: my-nginx-app
    spec:
      serviceAccountName: reader
      volumes:
        - name: azure-storage-volume
          persistentVolumeClaim:
            claimName: azure-storage-pvc
      # securityContext:
      #   fsGroup: 0
      #   runAsUser: 0
      initContainers:
        - name: init-pvc
          image: alpine
          command: ["/bin/sh", "-c"]
          args:
            - apk update;
            - apk add curl;
            - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl";
            - chmod +x ./kubectl;
            - mv ./kubectl /usr/local/bin/kubectl;
            - until kubectl get pvc azure-storage-pvc; do echo waiting for pvc; sleep 1; done; echo pvc found!;
        - name: init-svc
          image: busybox:1.28.4 #NSLOOKUP ISSUE ABOVE > 1.28.4 - https://github.com/kubernetes/kubernetes/issues/66924
          command: ["sh", "-c"]
          args:
            - until nslookup my-nginx-app-load-balancer; do echo waiting for load balancer; sleep 1; done; echo service found!;
      containers:
        - image: nginx
          name: nginx
          imagePullPolicy: Always
          resources:
            limits:
              memory: "128Mi"
              cpu: "250m"
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html
              name: azure-storage-volume
        - image: ubuntu:latest
          name: ubuntu
          imagePullPolicy: Always
          command: ["/bin/bash", "-c"]
          args:
            - '! test -f /data/index.html && echo "Andy WAS HERE" > ./data/index.html; sleep 60m'
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - mountPath: /data
              name: azure-storage-volume

---
apiVersion: v1
kind: Service
metadata:
  name: my-nginx-app-load-balancer
spec:
  type: LoadBalancer
  selector:
    app: my-nginx-app
  ports:
    - port: 80
      targetPort: 80
